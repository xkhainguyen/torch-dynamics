#include "dynamics_gpu.h"
#include <iostream>

#define GPU_1D_KERNEL_LOOP(i, n) \
    for (size_t i = blockIdx.x * blockDim.x + threadIdx.x; i < n; i += blockDim.x * gridDim.x)

#define NUM_THREADS 256
#define NUM_BLOCKS(batch_size) ((batch_size + NUM_THREADS - 1) / NUM_THREADS)

// Cleaner wrapper for the generated dynamics
__device__ void _dynamics_gpu(const double *q_in, const double *qdot_in, const double *tau_in, double *qddot_out)
{
    const double *arg[3] = {q_in, qdot_in, tau_in};
    double *res[1] = {qddot_out};

    double a0, a1, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a2, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a3, a4, a5, a6, a7, a8, a9;
    a0 = arg[2] ? arg[2][0] : 0;
    a1 = arg[0] ? arg[0][1] : 0;
    a2 = cos(a1);
    a3 = arg[1] ? arg[1][1] : 0;
    a4 = 10.;
    a1 = sin(a1);
    a5 = arg[1] ? arg[1][0] : 0;
    a6 = (a1 * a5);
    a7 = (a4 * a6);
    a7 = (a3 * a7);
    a8 = arg[0] ? arg[0][2] : 0;
    a9 = cos(a8);
    a10 = arg[1] ? arg[1][2] : 0;
    a11 = (a10 + a3);
    a8 = sin(a8);
    a5 = (a2 * a5);
    a12 = 5.0000000000000000e-01;
    a13 = (a12 * a3);
    a13 = (a5 + a13);
    a14 = (a8 * a13);
    a15 = (a9 * a6);
    a14 = (a14 + a15);
    a15 = (a4 * a14);
    a15 = (a11 * a15);
    a16 = 1.4285714285714284e+00;
    a17 = arg[2] ? arg[2][2] : 0;
    a18 = (a12 * a11);
    a18 = (a4 * a18);
    a19 = (a14 * a18);
    a19 = (a17 - a19);
    a20 = (a16 * a19);
    a21 = 2.8571428571428577e+00;
    a14 = (a10 * a14);
    a22 = (a21 * a14);
    a20 = (a20 - a22);
    a15 = (a15 + a20);
    a20 = (a9 * a15);
    a13 = (a9 * a13);
    a22 = (a8 * a6);
    a13 = (a13 - a22);
    a10 = (a10 * a13);
    a10 = (a4 * a10);
    a13 = (a4 * a13);
    a13 = (a13 + a18);
    a11 = (a11 * a13);
    a10 = (a10 - a11);
    a11 = (a8 * a10);
    a20 = (a20 + a11);
    a7 = (a7 + a20);
    a11 = (a4 * a8);
    a13 = (a11 * a9);
    a18 = (a21 * a9);
    a22 = (a18 * a8);
    a13 = (a13 - a22);
    a22 = 5.;
    a18 = (a18 * a9);
    a11 = (a11 * a8);
    a18 = (a18 + a11);
    a11 = (a12 * a18);
    a23 = 8.8817841970012523e-16;
    a24 = (a23 * a9);
    a11 = (a11 + a24);
    a22 = (a22 + a11);
    a25 = 3.5000000000000000e+00;
    a24 = (a12 * a24);
    a11 = (a12 * a11);
    a24 = (a24 + a11);
    a25 = (a25 + a24);
    a24 = (a22 / a25);
    a11 = (a12 * a13);
    a23 = (a23 * a8);
    a11 = (a11 - a23);
    a23 = (a24 * a11);
    a13 = (a13 - a23);
    a23 = (a3 * a5);
    a26 = (a13 * a23);
    a18 = (a4 + a18);
    a27 = (a24 * a22);
    a18 = (a18 - a27);
    a27 = (a3 * a6);
    a28 = (a18 * a27);
    a26 = (a26 - a28);
    a28 = arg[2] ? arg[2][1] : 0;
    a29 = (a12 * a3);
    a29 = (a4 * a29);
    a6 = (a6 * a29);
    a20 = (a12 * a20);
    a17 = (a17 + a20);
    a6 = (a6 + a17);
    a28 = (a28 - a6);
    a6 = (a24 * a28);
    a26 = (a26 + a6);
    a7 = (a7 + a26);
    a7 = (a2 * a7);
    a10 = (a9 * a10);
    a15 = (a8 * a15);
    a10 = (a10 - a15);
    a5 = (a4 * a5);
    a5 = (a5 + a29);
    a3 = (a3 * a5);
    a10 = (a10 - a3);
    a21 = (a21 * a8);
    a3 = (a21 * a8);
    a5 = (a4 * a9);
    a29 = (a5 * a9);
    a3 = (a3 + a29);
    a4 = (a4 + a3);
    a3 = (a11 / a25);
    a11 = (a3 * a11);
    a4 = (a4 - a11);
    a11 = (a4 * a23);
    a5 = (a5 * a8);
    a21 = (a21 * a9);
    a5 = (a5 - a21);
    a22 = (a3 * a22);
    a5 = (a5 - a22);
    a22 = (a5 * a27);
    a11 = (a11 - a22);
    a22 = (a3 * a28);
    a11 = (a11 + a22);
    a10 = (a10 + a11);
    a10 = (a1 * a10);
    a7 = (a7 + a10);
    a0 = (a0 - a7);
    a7 = 1.;
    a10 = (a2 * a18);
    a11 = (a1 * a5);
    a10 = (a10 + a11);
    a10 = (a10 * a2);
    a11 = (a2 * a13);
    a22 = (a1 * a4);
    a11 = (a11 + a22);
    a11 = (a11 * a1);
    a10 = (a10 + a11);
    a7 = (a7 + a10);
    a0 = (a0 / a7);
    a10 = 9.8100000000000005e+00;
    a5 = (a2 * a5);
    a18 = (a1 * a18);
    a5 = (a5 - a18);
    a5 = (a5 * a2);
    a4 = (a2 * a4);
    a13 = (a1 * a13);
    a4 = (a4 - a13);
    a4 = (a4 * a1);
    a5 = (a5 + a4);
    a5 = (a5 / a7);
    a5 = (a10 * a5);
    a0 = (a0 - a5);
    if (res[0] != 0)
        res[0][0] = a0;
    a28 = (a28 / a25);
    a25 = (a2 * a0);
    a5 = (a10 * a1);
    a25 = (a25 - a5);
    a25 = (a25 - a27);
    a24 = (a24 * a25);
    a1 = (a1 * a0);
    a10 = (a10 * a2);
    a1 = (a1 + a10);
    a23 = (a23 + a1);
    a3 = (a3 * a23);
    a24 = (a24 + a3);
    a28 = (a28 - a24);
    if (res[0] != 0)
        res[0][1] = a28;
    a24 = 2.8571428571428570e-01;
    a24 = (a24 * a19);
    a12 = (a12 * a28);
    a25 = (a25 + a12);
    a9 = (a9 * a25);
    a8 = (a8 * a23);
    a9 = (a9 - a8);
    a9 = (a9 - a14);
    a16 = (a16 * a9);
    a16 = (a16 + a28);
    a24 = (a24 - a16);
    if (res[0] != 0)
        res[0][2] = a24;
}

__device__ void _derivatives_gpu(const double *q_in, const double *qdot_in, const double *tau_in,
                                 double *qddot_jac_qout, double *qddot_jac_qdotout, double *qddot_jac_tauout)
{
    const double *arg[3] = {q_in, qdot_in, tau_in};
    double *res[3] = {qddot_jac_qout, qddot_jac_qdotout, qddot_jac_tauout};

    double a0, a1, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a2, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a3, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a4, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a5, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a6, a60, a61, a62, a63, a64, a65, a66, a7, a8, a9;
    a0 = 0.;
    if (res[0] != 0)
        res[0][0] = a0;
    if (res[0] != 0)
        res[0][1] = a0;
    if (res[0] != 0)
        res[0][2] = a0;
    a0 = arg[0] ? arg[0][1] : 0;
    a1 = cos(a0);
    a2 = 5.;
    a3 = 5.0000000000000000e-01;
    a4 = 2.8571428571428577e+00;
    a5 = arg[0] ? arg[0][2] : 0;
    a6 = cos(a5);
    a7 = (a4 * a6);
    a8 = (a7 * a6);
    a9 = 10.;
    a5 = sin(a5);
    a10 = (a9 * a5);
    a11 = (a10 * a5);
    a8 = (a8 + a11);
    a11 = (a3 * a8);
    a12 = 8.8817841970012523e-16;
    a13 = (a12 * a6);
    a11 = (a11 + a13);
    a14 = (a2 + a11);
    a15 = (a1 * a14);
    a0 = sin(a0);
    a10 = (a10 * a6);
    a7 = (a7 * a5);
    a10 = (a10 - a7);
    a7 = (a3 * a10);
    a12 = (a12 * a5);
    a7 = (a7 - a12);
    a12 = (a0 * a7);
    a15 = (a15 + a12);
    a12 = 3.5000000000000000e+00;
    a13 = (a3 * a13);
    a11 = (a3 * a11);
    a13 = (a13 + a11);
    a13 = (a12 + a13);
    a11 = (a15 / a13);
    a16 = 1.;
    a8 = (a9 + a8);
    a17 = (a14 / a13);
    a18 = (a17 * a14);
    a8 = (a8 - a18);
    a18 = (a1 * a8);
    a19 = (a9 * a6);
    a20 = (a19 * a5);
    a21 = (a4 * a5);
    a22 = (a21 * a6);
    a20 = (a20 - a22);
    a22 = (a7 / a13);
    a14 = (a22 * a14);
    a20 = (a20 - a14);
    a14 = (a0 * a20);
    a18 = (a18 + a14);
    a18 = (a18 * a1);
    a14 = (a17 * a7);
    a10 = (a10 - a14);
    a14 = (a1 * a10);
    a21 = (a21 * a5);
    a19 = (a19 * a6);
    a21 = (a21 + a19);
    a21 = (a9 + a21);
    a7 = (a22 * a7);
    a21 = (a21 - a7);
    a7 = (a0 * a21);
    a14 = (a14 + a7);
    a14 = (a14 * a0);
    a18 = (a18 + a14);
    a18 = (a16 + a18);
    a11 = (a11 / a18);
    a14 = arg[0] ? arg[0][0] : 0;
    a7 = 20.;
    a19 = arg[2] ? arg[2][0] : 0;
    a23 = arg[1] ? arg[1][1] : 0;
    a24 = arg[1] ? arg[1][0] : 0;
    a25 = (a0 * a24);
    a26 = (a1 * a25);
    a27 = (a1 * a24);
    a28 = (a0 * a27);
    a26 = (a26 - a28);
    a28 = (a14 * a23);
    a28 = (a26 + a28);
    a29 = (a3 * a0);
    a29 = (a14 + a29);
    a30 = (a29 * a23);
    a30 = (a28 - a30);
    a30 = (a9 * a30);
    a31 = (a23 * a30);
    a32 = (a1 * a31);
    a33 = (a1 * a27);
    a34 = (a0 * a25);
    a33 = (a33 + a34);
    a34 = (a3 * a1);
    a35 = (a34 * a23);
    a35 = (a33 + a35);
    a35 = (a9 * a35);
    a36 = (a23 * a35);
    a37 = (a0 * a36);
    a32 = (a32 + a37);
    a37 = (a1 * a6);
    a38 = (a0 * a5);
    a37 = (a37 - a38);
    a38 = arg[1] ? arg[1][2] : 0;
    a39 = (a38 + a23);
    a40 = (a1 * a6);
    a41 = (a0 * a5);
    a40 = (a40 - a41);
    a41 = (a3 * a23);
    a41 = (a27 + a41);
    a42 = (a5 * a41);
    a43 = (a6 * a25);
    a42 = (a42 + a43);
    a43 = (a40 * a42);
    a44 = (a0 * a6);
    a45 = (a1 * a5);
    a44 = (a44 + a45);
    a41 = (a6 * a41);
    a45 = (a5 * a25);
    a41 = (a41 - a45);
    a45 = (a44 * a41);
    a43 = (a43 - a45);
    a45 = (a3 * a0);
    a45 = (a14 + a45);
    a46 = (a45 * a39);
    a46 = (a43 + a46);
    a47 = (a1 * a5);
    a48 = (a0 * a6);
    a47 = (a47 + a48);
    a48 = (a3 * a47);
    a49 = (a45 + a48);
    a50 = (a49 * a39);
    a50 = (a46 - a50);
    a50 = (a9 * a50);
    a51 = (a39 * a50);
    a52 = (a37 * a51);
    a53 = (a37 * a41);
    a54 = (a47 * a42);
    a53 = (a53 + a54);
    a54 = (a3 * a1);
    a55 = (a54 * a39);
    a55 = (a53 - a55);
    a56 = (a3 * a40);
    a57 = (a54 + a56);
    a58 = (a57 * a39);
    a58 = (a55 + a58);
    a58 = (a9 * a58);
    a59 = (a39 * a58);
    a60 = (a44 * a59);
    a52 = (a52 + a60);
    a60 = 1.4285714285714284e+00;
    a61 = arg[2] ? arg[2][2] : 0;
    a62 = (a46 * a58);
    a63 = (a55 * a50);
    a62 = (a62 - a63);
    a63 = (a54 * a51);
    a64 = (a45 * a59);
    a63 = (a63 + a64);
    a62 = (a62 - a63);
    a62 = (a61 - a62);
    a63 = (a60 * a62);
    a42 = (a38 * a42);
    a4 = (a4 * a42);
    a63 = (a63 - a4);
    a52 = (a52 + a63);
    a63 = (a6 * a52);
    a51 = (a47 * a51);
    a59 = (a40 * a59);
    a51 = (a51 - a59);
    a38 = (a38 * a41);
    a41 = (a9 * a38);
    a51 = (a51 + a41);
    a41 = (a5 * a51);
    a63 = (a63 + a41);
    a32 = (a32 + a63);
    a27 = (a23 * a27);
    a41 = (a10 * a27);
    a25 = (a23 * a25);
    a59 = (a8 * a25);
    a41 = (a41 - a59);
    a59 = arg[2] ? arg[2][1] : 0;
    a4 = (a28 * a35);
    a64 = (a33 * a30);
    a4 = (a4 - a64);
    a64 = (a14 * a36);
    a4 = (a4 - a64);
    a63 = (a3 * a63);
    a61 = (a61 + a63);
    a4 = (a4 + a61);
    a59 = (a59 - a4);
    a4 = (a17 * a59);
    a41 = (a41 + a4);
    a32 = (a32 + a41);
    a32 = (a1 * a32);
    a31 = (a0 * a31);
    a36 = (a1 * a36);
    a31 = (a31 - a36);
    a51 = (a6 * a51);
    a52 = (a5 * a52);
    a51 = (a51 - a52);
    a31 = (a31 + a51);
    a51 = (a21 * a27);
    a52 = (a20 * a25);
    a51 = (a51 - a52);
    a52 = (a22 * a59);
    a51 = (a51 + a52);
    a31 = (a31 + a51);
    a31 = (a0 * a31);
    a32 = (a32 + a31);
    a19 = (a19 - a32);
    a19 = (a19 / a18);
    a32 = 9.8100000000000005e+00;
    a20 = (a1 * a20);
    a8 = (a0 * a8);
    a20 = (a20 - a8);
    a20 = (a20 * a1);
    a21 = (a1 * a21);
    a10 = (a0 * a10);
    a21 = (a21 - a10);
    a21 = (a21 * a0);
    a20 = (a20 + a21);
    a20 = (a20 / a18);
    a20 = (a32 * a20);
    a19 = (a19 - a20);
    a20 = (a7 * a19);
    a21 = (a14 * a20);
    a10 = -1.9620000000000002e+02;
    a8 = (a3 * a34);
    a31 = (a3 * a57);
    a8 = (a8 + a31);
    a31 = (a10 * a8);
    a51 = (a3 * a29);
    a52 = (a3 * a49);
    a51 = (a51 + a52);
    a20 = (a51 * a20);
    a31 = (a31 - a20);
    a20 = (a9 * a33);
    a52 = (a9 * a23);
    a36 = (a34 * a52);
    a36 = (a20 + a36);
    a41 = (a35 - a36);
    a55 = (a9 * a55);
    a4 = (a9 * a39);
    a61 = (a57 * a4);
    a61 = (a55 + a61);
    a63 = (a58 - a61);
    a41 = (a41 + a63);
    a64 = (a41 * a24);
    a31 = (a31 + a64);
    a21 = (a21 + a31);
    a31 = (a11 * a21);
    a64 = (a0 * a19);
    a65 = (a32 * a1);
    a64 = (a64 + a65);
    a27 = (a27 + a64);
    a64 = (a1 * a27);
    a65 = (a1 * a19);
    a32 = (a32 * a0);
    a65 = (a65 - a32);
    a65 = (a65 - a25);
    a25 = (a0 * a65);
    a64 = (a64 - a25);
    a59 = (a59 / a13);
    a25 = (a17 * a65);
    a32 = (a22 * a27);
    a25 = (a25 + a32);
    a59 = (a59 - a25);
    a25 = (a14 * a59);
    a64 = (a64 + a25);
    a25 = (a29 * a59);
    a25 = (a64 - a25);
    a25 = (a9 * a25);
    a32 = (a23 * a35);
    a25 = (a25 - a32);
    a3 = (a3 * a59);
    a3 = (a65 + a3);
    a32 = (a5 * a3);
    a66 = (a6 * a27);
    a32 = (a32 + a66);
    a38 = (a38 + a32);
    a40 = (a40 * a38);
    a6 = (a6 * a3);
    a5 = (a5 * a27);
    a6 = (a6 - a5);
    a6 = (a6 - a42);
    a42 = (a44 * a6);
    a40 = (a40 - a42);
    a42 = 2.8571428571428570e-01;
    a62 = (a42 * a62);
    a5 = (a60 * a6);
    a5 = (a5 + a59);
    a62 = (a62 - a5);
    a62 = (a59 + a62);
    a5 = (a45 * a62);
    a40 = (a40 + a5);
    a5 = (a49 * a62);
    a40 = (a40 - a5);
    a40 = (a9 * a40);
    a5 = (a39 * a58);
    a40 = (a40 - a5);
    a25 = (a25 + a40);
    a10 = (a10 + a25);
    a25 = (a10 / a18);
    a31 = (a31 - a25);
    a25 = (a2 * a37);
    a5 = (a42 * a25);
    a3 = (a14 / a13);
    a2 = (a2 * a44);
    a32 = (a42 * a2);
    a3 = (a3 * a32);
    a25 = (a54 * a25);
    a2 = (a45 * a2);
    a25 = (a25 + a2);
    a12 = (a12 + a25);
    a12 = (a42 * a12);
    a12 = (a12 / a13);
    a3 = (a3 - a12);
    a15 = (a15 * a3);
    a5 = (a5 + a15);
    a5 = (a5 / a18);
    a15 = -9.8100000000000005e+00;
    a56 = (a9 * a56);
    a15 = (a15 * a56);
    a48 = (a9 * a48);
    a19 = (a48 * a19);
    a15 = (a15 - a19);
    a19 = (a63 * a24);
    a15 = (a15 + a19);
    a19 = (a5 * a15);
    a31 = (a31 + a19);
    if (res[0] != 0)
        res[0][3] = a31;
    a31 = (a11 * a10);
    a13 = (1. / a13);
    a17 = (a1 * a17);
    a22 = (a0 * a22);
    a17 = (a17 + a22);
    a22 = (a17 * a11);
    a13 = (a13 + a22);
    a22 = (a13 * a21);
    a31 = (a31 - a22);
    a17 = (a17 * a5);
    a3 = (a3 + a17);
    a17 = (a3 * a15);
    a31 = (a31 - a17);
    if (res[0] != 0)
        res[0][4] = a31;
    a10 = (a5 * a10);
    a21 = (a3 * a21);
    a10 = (a10 - a21);
    a21 = (a60 * a37);
    a31 = (a54 * a21);
    a60 = (a60 * a44);
    a44 = (a45 * a60);
    a31 = (a31 + a44);
    a16 = (a16 + a31);
    a16 = (a16 * a3);
    a21 = (a21 * a5);
    a31 = (a14 * a3);
    a60 = (a60 * a31);
    a21 = (a21 + a60);
    a16 = (a16 - a21);
    a42 = (a42 - a16);
    a15 = (a42 * a15);
    a10 = (a10 - a15);
    if (res[0] != 0)
        res[0][5] = a10;
    a1 = (a1 * a65);
    a0 = (a0 * a27);
    a1 = (a1 + a0);
    a0 = (a59 * a54);
    a1 = (a1 + a0);
    a0 = (a23 * a45);
    a0 = (a0 - a28);
    a27 = (a23 * a0);
    a1 = (a1 - a27);
    a1 = (a9 * a1);
    a37 = (a37 * a6);
    a47 = (a47 * a38);
    a37 = (a37 + a47);
    a47 = (a54 * a62);
    a37 = (a37 - a47);
    a62 = (a57 * a62);
    a37 = (a37 + a62);
    a37 = (a9 * a37);
    a39 = (a39 * a50);
    a37 = (a37 + a39);
    a39 = (a1 - a37);
    a39 = (a14 * a39);
    a59 = (a59 * a45);
    a59 = (a59 - a64);
    a64 = (a23 * a54);
    a64 = (a33 + a64);
    a23 = (a23 * a64);
    a59 = (a59 + a23);
    a59 = (a9 * a59);
    a23 = (a57 * a59);
    a62 = (a49 * a1);
    a23 = (a23 - a62);
    a46 = (a9 * a46);
    a4 = (a49 * a4);
    a4 = (a46 - a4);
    a62 = (a4 - a50);
    a47 = (a62 * a0);
    a38 = (a63 * a64);
    a47 = (a47 + a38);
    a23 = (a23 + a47);
    a37 = (a45 * a37);
    a47 = (a54 * a40);
    a37 = (a37 + a47);
    a37 = (a23 + a37);
    a39 = (a39 + a37);
    a37 = (a11 * a39);
    a40 = (a59 + a40);
    a47 = (a40 / a18);
    a37 = (a37 - a47);
    a1 = (a45 * a1);
    a59 = (a54 * a59);
    a1 = (a1 - a59);
    a1 = (a1 + a23);
    a23 = (a5 * a1);
    a37 = (a37 + a23);
    if (res[0] != 0)
        res[0][6] = a37;
    a37 = (a11 * a40);
    a23 = (a13 * a39);
    a37 = (a37 - a23);
    a23 = (a3 * a1);
    a37 = (a37 - a23);
    if (res[0] != 0)
        res[0][7] = a37;
    a40 = (a5 * a40);
    a39 = (a3 * a39);
    a40 = (a40 - a39);
    a1 = (a42 * a1);
    a40 = (a40 - a1);
    if (res[0] != 0)
        res[0][8] = a40;
    a28 = (a9 * a28);
    a52 = (a29 * a52);
    a52 = (a28 - a52);
    a40 = (a52 - a30);
    a40 = (a40 + a62);
    a1 = (a11 * a40);
    a39 = (a5 * a62);
    a1 = (a1 + a39);
    if (res[1] != 0)
        res[1][0] = a1;
    a1 = (a13 * a40);
    a39 = (a3 * a62);
    a1 = (a1 + a39);
    a1 = (-a1);
    if (res[1] != 0)
        res[1][1] = a1;
    a40 = (a3 * a40);
    a1 = (a42 * a62);
    a40 = (a40 + a1);
    a40 = (-a40);
    if (res[1] != 0)
        res[1][2] = a40;
    a33 = (a33 + a24);
    a24 = (a7 * a33);
    a36 = (a36 + a35);
    a61 = (a61 + a58);
    a36 = (a36 + a61);
    a36 = (a24 - a36);
    a36 = (a14 * a36);
    a41 = (a41 * a14);
    a58 = (a20 * a29);
    a35 = (a28 * a34);
    a58 = (a58 + a35);
    a29 = (a29 * a20);
    a34 = (a34 * a28);
    a29 = (a29 + a34);
    a58 = (a58 + a29);
    a29 = (a55 * a49);
    a34 = (a46 * a57);
    a29 = (a29 + a34);
    a55 = (a49 * a55);
    a46 = (a57 * a46);
    a55 = (a55 + a46);
    a29 = (a29 + a55);
    a58 = (a58 + a29);
    a41 = (a41 + a58);
    a7 = (a7 * a26);
    a8 = (a8 * a7);
    a51 = (a51 * a24);
    a8 = (a8 + a51);
    a41 = (a41 - a8);
    a36 = (a36 + a41);
    a41 = (a11 * a36);
    a52 = (a52 + a30);
    a4 = (a4 + a50);
    a52 = (a52 + a4);
    a52 = (a52 - a7);
    a7 = (a52 / a18);
    a41 = (a41 - a7);
    a7 = (a63 * a14);
    a50 = (a54 * a4);
    a30 = (a45 * a61);
    a50 = (a50 + a30);
    a50 = (a29 - a50);
    a7 = (a7 + a50);
    a56 = (a56 * a26);
    a48 = (a48 * a33);
    a56 = (a56 + a48);
    a7 = (a7 - a56);
    a56 = (a5 * a7);
    a41 = (a41 + a56);
    if (res[1] != 0)
        res[1][3] = a41;
    a41 = (a11 * a52);
    a56 = (a13 * a36);
    a41 = (a41 - a56);
    a56 = (a3 * a7);
    a41 = (a41 - a56);
    if (res[1] != 0)
        res[1][4] = a41;
    a52 = (a5 * a52);
    a36 = (a3 * a36);
    a52 = (a52 - a36);
    a7 = (a42 * a7);
    a52 = (a52 - a7);
    if (res[1] != 0)
        res[1][5] = a52;
    a53 = (a53 + a64);
    a53 = (a9 * a53);
    a61 = (a53 - a61);
    a14 = (a14 * a61);
    a0 = (a0 - a43);
    a9 = (a9 * a0);
    a57 = (a57 * a9);
    a49 = (a49 * a53);
    a57 = (a57 - a49);
    a63 = (a63 * a45);
    a62 = (a62 * a54);
    a63 = (a63 - a62);
    a63 = (a63 + a29);
    a57 = (a57 + a63);
    a14 = (a14 + a57);
    a63 = (a11 * a14);
    a9 = (a9 + a4);
    a4 = (a9 / a18);
    a63 = (a63 - a4);
    a45 = (a45 * a61);
    a54 = (a54 * a9);
    a45 = (a45 - a54);
    a45 = (a45 + a57);
    a57 = (a5 * a45);
    a63 = (a63 + a57);
    if (res[1] != 0)
        res[1][6] = a63;
    a63 = (a11 * a9);
    a57 = (a13 * a14);
    a63 = (a63 - a57);
    a57 = (a3 * a45);
    a63 = (a63 - a57);
    if (res[1] != 0)
        res[1][7] = a63;
    a9 = (a5 * a9);
    a14 = (a3 * a14);
    a9 = (a9 - a14);
    a45 = (a42 * a45);
    a9 = (a9 - a45);
    if (res[1] != 0)
        res[1][8] = a9;
    a18 = (1. / a18);
    if (res[2] != 0)
        res[2][0] = a18;
    a11 = (-a11);
    if (res[2] != 0)
        res[2][1] = a11;
    a5 = (-a5);
    if (res[2] != 0)
        res[2][2] = a5;
    if (res[2] != 0)
        res[2][3] = a11;
    if (res[2] != 0)
        res[2][4] = a13;
    if (res[2] != 0)
        res[2][5] = a3;
    if (res[2] != 0)
        res[2][6] = a5;
    if (res[2] != 0)
        res[2][7] = a3;
    if (res[2] != 0)
        res[2][8] = a42;
}

// Multi-threaded GPU code
template <typename scalar_t>
__global__ void dynamics_kernel_gpu(const scalar_t *q_in_ptr, const scalar_t *qdot_in_ptr, const scalar_t *tau_in_ptr, scalar_t *qddot_out_ptr, int q_size, int num_threads)
{
    GPU_1D_KERNEL_LOOP(b, num_threads)
    {
        _dynamics_gpu(q_in_ptr + b * q_size, qdot_in_ptr + b * q_size, tau_in_ptr + b * q_size, qddot_out_ptr + b * q_size);
    }
}

template <typename scalar_t>
__global__ void derivatives_kernel_gpu(const scalar_t* q_in_ptr, const scalar_t* qdot_in_ptr, const scalar_t* tau_in_ptr, 
                                   scalar_t* qddot_jac_qout_ptr, scalar_t* qddot_jac_qdotout_ptr, scalar_t* qddot_jac_tauout_ptr, int q_size, int num_threads) {
    GPU_1D_KERNEL_LOOP(b, num_threads)
    {
        _derivatives_gpu(q_in_ptr + b*q_size, qdot_in_ptr + b*q_size, tau_in_ptr + b*q_size, qddot_jac_qout_ptr + b*q_size*q_size, qddot_jac_qdotout_ptr + b*q_size*q_size, qddot_jac_tauout_ptr + b*q_size*q_size);
    }
}


// Torch CPU wrapper
torch::Tensor dynamics_gpu(torch::Tensor q_in, torch::Tensor qdot_in, torch::Tensor tau_in)
{
    int batch_size = q_in.size(0);
    int q_size = q_in.size(1);
    torch::Tensor qddot_out = torch::zeros_like(q_in);
    using scalar_t = double;

    dynamics_kernel_gpu<scalar_t><<<NUM_BLOCKS(batch_size), NUM_THREADS>>>(
        q_in.data_ptr<scalar_t>(),
        qdot_in.data_ptr<scalar_t>(),
        tau_in.data_ptr<scalar_t>(),
        qddot_out.data_ptr<scalar_t>(),
        q_size,
        batch_size);

    return qddot_out;
}

std::vector<torch::Tensor>  derivatives_gpu(torch::Tensor q_in, torch::Tensor qdot_in, torch::Tensor tau_in) {
    int batch_size = q_in.size(0);
    int q_size = q_in.size(1);
    torch::Tensor qddot_jac_qout = torch::zeros({batch_size, q_size, q_size}, q_in.options());
    torch::Tensor qddot_jac_qdotout = torch::zeros({batch_size, q_size, q_size}, q_in.options());
    torch::Tensor qddot_jac_tauout = torch::zeros({batch_size, q_size, q_size}, q_in.options());
    using scalar_t = double; 

    derivatives_kernel_gpu<scalar_t><<<NUM_BLOCKS(batch_size), NUM_THREADS>>>(
        q_in.data_ptr<scalar_t>(), 
        qdot_in.data_ptr<scalar_t>(), 
        tau_in.data_ptr<scalar_t>(), 
        qddot_jac_qout.data_ptr<scalar_t>(), 
        qddot_jac_qdotout.data_ptr<scalar_t>(),
        qddot_jac_tauout.data_ptr<scalar_t>(),
        q_size,
        batch_size);

    return {qddot_jac_qout, qddot_jac_qdotout, qddot_jac_tauout};
}
